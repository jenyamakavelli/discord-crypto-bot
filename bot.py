import os
import asyncio
import logging
import aiohttp
from discord.ext import commands, tasks
import discord

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("DISCORD_TOKEN")

BTC_CHANNEL_ID = int(os.getenv("BTC_CHANNEL_ID"))
ETH_CHANNEL_ID = int(os.getenv("ETH_CHANNEL_ID"))
FNG_CHANNEL_ID = int(os.getenv("FNG_CHANNEL_ID"))
BINANCE_VOLUME_CHANNEL_ID = None  # —É–±—Ä–∞–ª–∏ Binance, –Ω–µ –Ω—É–∂–µ–Ω
COINGECKO_VOLUME_CHANNEL_ID = int(os.getenv("COINGECKO_VOLUME_CHANNEL_ID"))

intents = discord.Intents.default()
client = commands.Bot(command_prefix="!", intents=intents)

last_prices = {"btc": None, "eth": None}
last_fng = None
last_volumes = {"btc": None, "eth": None}

HEADERS = {
    "Accept": "application/json",
    "User-Agent": "Mozilla/5.0 (compatible; CryptoPriceBot/1.0)"
}

async def fetch_json(session, url, params=None):
    async with session.get(url, params=params, headers=HEADERS) as resp:
        resp.raise_for_status()
        return await resp.json()

@tasks.loop(minutes=3)
async def update_prices_and_volumes():
    global last_prices, last_volumes
    logging.info("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º—ã BTC –∏ ETH —Å CoinGecko...")
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",
        "ids": "bitcoin,ethereum",
        "order": "market_cap_desc",
        "per_page": 2,
        "page": 1,
        "sparkline": "false"
    }
    try:
        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, url, params)
            btc_data = data[0]
            eth_data = data[1]

            btc_price = round(btc_data["current_price"], 2)
            eth_price = round(eth_data["current_price"], 2)
            btc_volume = int(btc_data["total_volume"])
            eth_volume = int(eth_data["total_volume"])

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω BTC
            if last_prices["btc"] != btc_price:
                channel = client.get_channel(BTC_CHANNEL_ID)
                if channel:
                    await channel.edit(name=f"BTC: ${btc_price:,}")
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∫–∞–Ω–∞–ª–∞ BTC: BTC: ${btc_price:,}")
                last_prices["btc"] = btc_price

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω ETH
            if last_prices["eth"] != eth_price:
                channel = client.get_channel(ETH_CHANNEL_ID)
                if channel:
                    await channel.edit(name=f"ETH: ${eth_price:,}")
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∫–∞–Ω–∞–ª–∞ ETH: ETH: ${eth_price:,}")
                last_prices["eth"] = eth_price

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ BTC
            if last_volumes["btc"] != btc_volume:
                channel = client.get_channel(COINGECKO_VOLUME_CHANNEL_ID)
                if channel:
                    await channel.edit(name=f"BTC Vol: ${btc_volume:,}")
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∫–∞–Ω–∞–ª–∞ BTC Vol: ${btc_volume:,}")
                last_volumes["btc"] = btc_volume

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ ETH
            if last_volumes["eth"] != eth_volume:
                # –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è ETH –æ–±—ä–µ–º–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                # –ò–ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å BTC –æ–±—ä–µ–º–æ–º –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª
                pass  # –∑–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å
                last_volumes["eth"] = eth_volume

    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –∏ –æ–±—ä–µ–º–æ–≤: {e}")

@tasks.loop(minutes=30)
async def update_fear_and_greed():
    global last_fng
    logging.info("üîÑ –û–±–Ω–æ–≤–ª—è—é –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏...")
    url = "https://api.alternative.me/fng/"
    try:
        async with aiohttp.ClientSession() as session:
            data = await fetch_json(session, url)
            fng_value = int(data["data"][0]["value"])
            if last_fng != fng_value:
                channel = client.get_channel(FNG_CHANNEL_ID)
                if channel:
                    await channel.edit(name=f"Fear & Greed: {fng_value}")
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∫–∞–Ω–∞–ª–∞ Fear & Greed: {fng_value}")
                last_fng = fng_value
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {e}")

@client.event
async def on_ready():
    logging.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {client.user}")
    update_prices_and_volumes.start()
    update_fear_and_greed.start()

if __name__ == "__main__":
    client.run(TOKEN)
