import os
import logging
import asyncio
import aiohttp
import discord
from discord.ext import tasks, commands
from flask import Flask
from threading import Thread
from datetime import datetime, timedelta, timezone
import pytz

# ---------- logging ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("forex-sessions")

# =============== CONFIG ===============
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
BTC_PRICE_CHANNEL_ID = int(os.getenv("BTC_PRICE_CHANNEL_ID", "0"))
ETH_PRICE_CHANNEL_ID = int(os.getenv("ETH_PRICE_CHANNEL_ID", "0"))
FNG_CHANNEL_ID = int(os.getenv("FNG_CHANNEL_ID", "0"))
BTC_VOL_CHANNEL_ID = int(os.getenv("BTC_VOL_CHANNEL_ID", "0"))
ETH_VOL_CHANNEL_ID = int(os.getenv("ETH_VOL_CHANNEL_ID", "0"))
SESSIONS_CHANNEL_ID = int(os.getenv("SESSIONS_CHANNEL_ID", "0"))
HEALTH_URL = os.getenv("HEALTH_URL")  # –î–ª—è Koyeb Ping, –Ω–∞–ø—Ä–∏–º–µ—Ä https://your-deploy-url/
# =====================================

intents = discord.Intents.default()
bot = commands.Bot(command_prefix="!", intents=intents)

# ===== Flask health server (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø–∏–Ω–≥–∞) =====
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

def run_flask():
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–º–µ–ª HTTP endpoint
    app.run(host="0.0.0.0", port=8000)

Thread(target=run_flask, daemon=True).start()

# ===== Shared state =====
last_values = {
    "sessions_msg_id": None,
    "sessions_msg_content": None,
    "sessions_last_update": None,
}

# ===== Helpers =====
def format_timedelta(delta: timedelta) -> str:
    total_seconds = int(delta.total_seconds())
    if total_seconds < 0:
        total_seconds = 0
    days, remainder = divmod(total_seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes = remainder // 60
    parts = []
    if days > 0:
        parts.append(f"{days}d")
    if hours > 0 or days > 0:
        parts.append(f"{hours}h")
    parts.append(f"{minutes}m")
    return " ".join(parts)

def format_updated_since(last_update_dt, now_dt):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ª–æ–≤–∞ '–æ–±–Ω–æ–≤–ª–µ–Ω–æ' (—á—Ç–æ–±—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)."""
    if last_update_dt is None:
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    diff = now_dt - last_update_dt
    seconds = int(diff.total_seconds())
    if seconds < 60:
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    elif seconds < 3600:
        mins = int(seconds // 60)
        return f"{mins} –º–∏–Ω –Ω–∞–∑–∞–¥"
    else:
        hours = int(seconds // 3600)
        return f"{hours} —á –Ω–∞–∑–∞–¥"

def get_session_status_emoji(status, relative_seconds):
    if status == "open":
        return "üü¢"
    elif status == "closed":
        if relative_seconds <= 3600:
            return "üü°"
        return "üî¥"
    return ""

# ===== Timezones =====
MIAMI_TZ = pytz.timezone("America/New_York")   # ET (NY/Miami) ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ DST-aware
EUROPE_TZ = pytz.timezone("Europe/Berlin")     # CET/CEST (–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ Europe/Berlin)

# ===== Session definitions (open time in ET) =====
SESSION_DEFS = {
    "Pacific": {
        "open_hour": 17,
        "open_minute": 0,
        "duration_hours": 9.0,   # 17:00 ‚Äì 02:00 ET
        "symbols": ["AUD", "NZD"],
    },
    "Tokyo": {
        "open_hour": 19,
        "open_minute": 0,
        "duration_hours": 9.0,   # 19:00 ‚Äì 04:00 ET
        "symbols": ["JPY", "CNY", "SGD", "HKD"],
    },
    "European": {
        "open_hour": 3,
        "open_minute": 0,
        "duration_hours": 9.0,   # 03:00 ‚Äì 12:00 ET
        "symbols": ["EUR", "GBP", "CHF"],
    },
    "American": {
        "open_hour": 8,
        "open_minute": 30,
        "duration_hours": 8.5,   # 08:30 ‚Äì 17:00 ET
        "symbols": ["USD"],
    },
}

def get_last_open_close(now_miami, open_hour, open_minute, duration_hours):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (last_open_dt, last_close_dt) ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ/—Ç–µ–∫—É—â–µ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ,
    –≥–¥–µ now_miami ‚Äî timezone-aware dt –≤ MIAMI_TZ —Å –æ—Ç–±—Ä–æ—à–µ–Ω–Ω—ã–º–∏ —Å–µ–∫—É–Ω–¥–∞–º–∏/–º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏.
    """
    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ú–∞–π–∞–º–∏
    open_today = now_miami.replace(hour=open_hour, minute=open_minute, second=0, microsecond=0)

    if now_miami >= open_today:
        last_open = open_today
    else:
        last_open = open_today - timedelta(days=1)

    # close –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å ‚Äî timedelta(hours=duration_hours) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—ã
    last_close = last_open + timedelta(hours=duration_hours)
    return last_open, last_close

def get_sessions_status(now_utc):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–µ—Å—Å–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º status/delta –∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è (—Å—Ç—Ä–æ–∫–∏ HH:MM).
    """
    now_miami = now_utc.astimezone(MIAMI_TZ).replace(second=0, microsecond=0)
    result = {}

    for name, params in SESSION_DEFS.items():
        last_open, last_close = get_last_open_close(now_miami, params["open_hour"], params["open_minute"], params["duration_hours"])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –¥–æ —Å–æ–±—ã—Ç–∏—è
        if last_open <= now_miami < last_close:
            status = "open"
            delta = last_close - now_miami
        else:
            status = "closed"
            # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è (—Ç.–µ. now < last_open) ‚Äî delta = last_open - now
            # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è (now >= last_close) ‚Äî —Å–ª–µ–¥—É—é—â–∞—è —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç last_open + 1 –¥–µ–Ω—å
            if now_miami < last_open:
                delta = last_open - now_miami
            else:
                next_open = last_open + timedelta(days=1)
                delta = next_open - now_miami

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏ (open/close) -- –∏—Å–ø–æ–ª—å–∑—É–µ–º last_open/last_close –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ HH:MM
        open_time_miami = last_open.strftime("%H:%M")
        close_time_miami = last_close.strftime("%H:%M")

        open_time_eu = last_open.astimezone(EUROPE_TZ).strftime("%H:%M")
        close_time_eu = last_close.astimezone(EUROPE_TZ).strftime("%H:%M")

        # DEBUG: –ª–æ–≥–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—É–¥–∞–ª–∏—Ç–µ –ø—Ä–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ)
        logger.debug(
            "%s: now=%s, last_open=%s, last_close=%s, status=%s, delta=%s",
            name,
            now_miami.isoformat(),
            last_open.isoformat(),
            last_close.isoformat(),
            status,
            str(delta),
        )

        result[name] = {
            "status": status,
            "relative_seconds": int(delta.total_seconds()),
            "formatted_delta": format_timedelta(delta),
            "symbols": params["symbols"],
            "open_time_miami": open_time_miami,
            "close_time_miami": close_time_miami,
            "open_time_europe": open_time_eu,
            "close_time_europe": close_time_eu,
        }

    return result

async def update_sessions_message():
    now_utc = datetime.now(timezone.utc)
    sessions_info = get_sessions_status(now_utc)

    # format_updated_since –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "—Ç–æ–ª—å–∫–æ —á—Ç–æ" / "X –º–∏–Ω –Ω–∞–∑–∞–¥" / "Y —á –Ω–∞–∑–∞–¥" (–±–µ–∑ —Å–ª–æ–≤–∞ "–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    updated_text = format_updated_since(last_values.get("sessions_last_update"), now_utc)
    header = f"üïí –§–æ—Ä–µ–∫—Å —Å–µ—Å—Å–∏–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_text})\n\n"

    order = ["Pacific", "Tokyo", "European", "American"]
    lines = []
    for name in order:
        info = sessions_info[name]
        emoji = get_session_status_emoji(info["status"], info["relative_seconds"])
        status_short = "–æ—Ç–∫—Ä." if info["status"] == "open" else "–∑–∞–∫—Ä."
        action = "–∑–∞–∫—Ä–æ–µ—Ç—Å—è" if info["status"] == "open" else "–æ—Ç–∫—Ä–æ–µ—Ç—Å—è"
        line = f"{emoji}  {name}:  {status_short} ‚Äî {action} —á–µ—Ä–µ–∑  {info['formatted_delta']}  [{', '.join(info['symbols'])}]"
        lines.append(line)

    # footer ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∞–º
    footer_lines = []
    footer_lines.append("\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n")
    footer_lines.append("üìä –í—Ä–µ–º—è —Å–µ—Å—Å–∏–π (–æ—Ç–∫—Ä—ã—Ç–∏–µ ‚Äî –∑–∞–∫—Ä—ã—Ç–∏–µ):\n")
    for name in order:
        info = sessions_info[name]
        footer_lines.append(f"{name:<9}: üá∫üá∏ {info['open_time_miami']}‚Äì{info['close_time_miami']}  |  üá™üá∫ {info['open_time_europe']}‚Äì{info['close_time_europe']}")

    content = header + "\n".join(lines) + "\n\n" + "\n".join(footer_lines)

    channel = bot.get_channel(SESSIONS_CHANNEL_ID)
    if not channel:
        logger.error("Sessions channel not found (SESSIONS_CHANNEL_ID=%s)", SESSIONS_CHANNEL_ID)
        return

    # –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    now_for_store = now_utc
    if last_values.get("sessions_msg_id"):
        try:
            msg = await channel.fetch_message(last_values["sessions_msg_id"])
            if msg.content != content:
                await msg.edit(content=content)
                last_values["sessions_msg_content"] = content
                last_values["sessions_last_update"] = now_for_store
                logger.info("Updated sessions message")
        except (discord.NotFound, discord.Forbidden) as e:
            logger.warning("Previous sessions message not found or forbidden, creating new one: %s", e)
            msg = await channel.send(content)
            last_values["sessions_msg_id"] = msg.id
            last_values["sessions_msg_content"] = content
            last_values["sessions_last_update"] = now_for_store
            logger.info("Created new sessions message")
    else:
        msg = await channel.send(content)
        last_values["sessions_msg_id"] = msg.id
        last_values["sessions_msg_content"] = content
        last_values["sessions_last_update"] = now_for_store
        logger.info("Created sessions message")

# ===== Background tasks =====
@tasks.loop(seconds=60)
async def update_sessions():
    try:
        await update_sessions_message()
    except Exception as e:
        logger.exception("Error in update_sessions task: %s", e)

# ===== Auto-ping Koyeb (—á—Ç–æ–±—ã –Ω–µ —É—Å—ã–ø–ª—è–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä) =====
@tasks.loop(minutes=5)
async def ping_health():
    if not HEALTH_URL:
        return
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(HEALTH_URL, timeout=10) as resp:
                logger.debug("Pinged health URL %s status=%s", HEALTH_URL, resp.status)
    except Exception as e:
        logger.warning("Health ping failed: %s", e)

# ===== Startup =====
@bot.event
async def on_ready():
    logger.info("Bot started as %s", bot.user)
    if not update_sessions.is_running():
        update_sessions.start()
    if HEALTH_URL and not ping_health.is_running():
        ping_health.start()

if __name__ == "__main__":
    if not DISCORD_TOKEN:
        logger.error("DISCORD_TOKEN not set")
        raise SystemExit(1)
    bot.run(DISCORD_TOKEN)
