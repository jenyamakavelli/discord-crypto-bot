import os
import logging
import asyncio
import aiohttp
import discord
from discord.ext import tasks, commands
from flask import Flask
from threading import Thread
from datetime import datetime, timedelta, timezone
import pytz

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# =============== CONFIG ===============
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
BTC_PRICE_CHANNEL_ID = int(os.getenv("BTC_PRICE_CHANNEL_ID"))
ETH_PRICE_CHANNEL_ID = int(os.getenv("ETH_PRICE_CHANNEL_ID"))
FNG_CHANNEL_ID = int(os.getenv("FNG_CHANNEL_ID"))
BTC_VOL_CHANNEL_ID = int(os.getenv("BTC_VOL_CHANNEL_ID"))
ETH_VOL_CHANNEL_ID = int(os.getenv("ETH_VOL_CHANNEL_ID"))
SESSIONS_CHANNEL_ID = int(os.getenv("SESSIONS_CHANNEL_ID"))
HEALTH_URL = os.getenv("HEALTH_URL")  # –î–ª—è Koyeb Ping
# =====================================

intents = discord.Intents.default()
bot = commands.Bot(command_prefix="!", intents=intents)

# ===== Flask health server =====
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=8000)

Thread(target=run_flask, daemon=True).start()

# ===== Shared state =====
last_values = {
    "sessions_msg_id": None,
    "sessions_msg_content": None,
    "sessions_last_update": None,
}

# ===== Constants & Timezones =====
MIAMI_TZ = pytz.timezone("America/New_York")
LONDON_TZ = pytz.timezone("Europe/London")
TOKYO_TZ = pytz.timezone("Asia/Tokyo")

# ===== Market session schedule (–≤—Ä–µ–º—è –ú–∞–π–∞–º–∏) =====
# –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ local time –ú–∞–π–∞–º–∏

# –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ä—ã–Ω–∫–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–Ω—ã–º–∏ (–ü—è—Ç–Ω–∏—Ü–∞ 17:00)
MARKET_CLOSE_TIME = {"hour": 17, "minute": 0}

# –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä—ã–Ω–∫–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö (–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 17:00)
MARKET_OPEN_TIME = {"hour": 17, "minute": 0}

# –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Å–µ—Å—Å–∏–π (–≤ —á–∞—Å–∞—Ö) - –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ
SESSIONS = {
    "Tokyo": {
        "open_hour": 19,   # 7 PM –ú–∞–π–∞–º–∏ –≤—Ä–µ–º—è = 8 AM Tokyo —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        "close_hour": 4,   # 4 AM –ú–∞–π–∞–º–∏ (—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
        "timezone": TOKYO_TZ,
    },
    "London": {
        "open_hour": 3,    # 3 AM –ú–∞–π–∞–º–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 8 AM London)
        "close_hour": 12,  # 12 PM –ú–∞–π–∞–º–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 5 PM London)
        "timezone": LONDON_TZ,
    },
    "New York": {
        "open_hour": 8,    # 8 AM –ú–∞–π–∞–º–∏
        "close_hour": 17,  # 5 PM –ú–∞–π–∞–º–∏
        "timezone": MIAMI_TZ,
    },
}

def get_next_weekday(dt, weekday):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –±–ª–∏–∂–∞–π—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0=–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫,...,6=–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    –ï—Å–ª–∏ dt - –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å, –≤–µ—Ä–Ω–µ—Ç dt.
    """
    days_ahead = (weekday - dt.weekday()) % 7
    return dt + timedelta(days=days_ahead)

def get_market_open_close_dt(market, now_miami):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –≤ datetime (–ú–∞–π–∞–º–∏), —Å —É—á—ë—Ç–æ–º
    —Ä–∞–±–æ—Ç—ã —Å–µ—Å—Å–∏–π –≤–Ω—É—Ç—Ä–∏ –Ω–µ–¥–µ–ª–∏.
    """
    session = SESSIONS[market]

    # –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ —Å–µ–π—á–∞—Å –≤ –≤—ã—Ö–æ–¥–Ω—ã—Ö (–ø—è—Ç–Ω–∏—Ü–∞ 17:00 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 17:00), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è open/close

    friday_close = now_miami.replace(hour=MARKET_CLOSE_TIME["hour"], minute=MARKET_CLOSE_TIME["minute"], second=0, microsecond=0)
    friday_close = get_next_weekday(friday_close, 4)  # –ë–ª–∏–∂–∞–π—à–∞—è –ø—è—Ç–Ω–∏—Ü–∞

    sunday_open = now_miami.replace(hour=MARKET_OPEN_TIME["hour"], minute=MARKET_OPEN_TIME["minute"], second=0, microsecond=0)
    sunday_open = get_next_weekday(sunday_open, 6)  # –ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ –ø—è—Ç–Ω–∏—Ü—ã 17:00 –∏ –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è 17:00 ‚Äî —Ä—ã–Ω–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã
    if friday_close <= now_miami < sunday_open:
        return None, None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏

    # –î–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    open_dt = now_miami.replace(hour=session["open_hour"], minute=0, second=0, microsecond=0)
    close_dt = now_miami.replace(hour=session["close_hour"], minute=0, second=0, microsecond=0)

    # –î–ª—è —Å–µ—Å—Å–∏–π —Å "–∑–∞–∫—Ä—ã—Ç–∏–µ–º" –≤ —Å–ª–µ–¥—É—é—â–µ–º –¥–Ω–µ (Tokyo)
    if session["close_hour"] < session["open_hour"]:
        # close_dt –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        close_dt += timedelta(days=1)

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –ø—Ä–æ—à–ª–æ–º, –±–µ—Ä—ë–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (—Ä–∞–±–æ—á–µ–≥–æ)
    if open_dt <= now_miami:
        open_dt += timedelta(days=1)
        close_dt += timedelta(days=1)

    return open_dt, close_dt

def get_session_status(market, now_miami):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å (open/closed) –∏ timedelta –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è
    """

    friday_close = now_miami.replace(hour=MARKET_CLOSE_TIME["hour"], minute=MARKET_CLOSE_TIME["minute"], second=0, microsecond=0)
    friday_close = get_next_weekday(friday_close, 4)  # –±–ª–∏–∂–∞–π—à–∞—è –ø—è—Ç–Ω–∏—Ü–∞ 17:00

    sunday_open = now_miami.replace(hour=MARKET_OPEN_TIME["hour"], minute=MARKET_OPEN_TIME["minute"], second=0, microsecond=0)
    sunday_open = get_next_weekday(sunday_open, 6)  # –±–ª–∏–∂–∞–π—à–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 17:00

    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤—ã—Ö–æ–¥–Ω—ã–µ - –∑–∞–∫—Ä—ã—Ç—ã –≤—Å–µ —Ä—ã–Ω–∫–∏
    if friday_close <= now_miami < sunday_open:
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª—è –¢–æ–∫–∏–æ —Ç–æ–ª—å–∫–æ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 17:00
        if market == "Tokyo":
            time_to_open = sunday_open - now_miami
            return "closed", time_to_open

        # London –∏ New York ‚Äî –∑–∞–∫—Ä—ã—Ç—ã –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ, –æ—Ç–∫—Ä–æ—é—Ç—Å—è –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 17:00
        time_to_open = sunday_open - now_miami
        return "closed", time_to_open

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –±—É–¥–Ω–∏–µ, —Å—á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å

    open_dt, close_dt = get_market_open_close_dt(market, now_miami)

    if open_dt is None or close_dt is None:
        # –ï—Å–ª–∏ None, –∑–Ω–∞—á–∏—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ
        return "closed", sunday_open - now_miami

    if open_dt <= now_miami < close_dt:
        # –†—ã–Ω–æ–∫ –æ—Ç–∫—Ä—ã—Ç
        time_to_close = close_dt - now_miami
        return "open", time_to_close
    else:
        # –†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç, –∂–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è
        time_to_open = open_dt - now_miami
        return "closed", time_to_open

def format_timedelta(delta):
    total_seconds = int(delta.total_seconds())
    if total_seconds < 0:
        total_seconds = 0
    days, remainder = divmod(total_seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes = remainder // 60
    parts = []
    if days > 0:
        parts.append(f"{days}d")
    if hours > 0 or days > 0:
        parts.append(f"{hours}h")
    parts.append(f"{minutes}m")
    return " ".join(parts)

def get_session_status_emoji(status, seconds_until):
    if status == "open":
        return "üü¢"
    if status == "closed":
        if seconds_until <= 3600:
            return "üü°"
        return "üî¥"
    return ""

def format_updated_since(last_update_dt, now_dt):
    if not last_update_dt:
        return "–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ"
    diff = now_dt - last_update_dt
    seconds = diff.total_seconds()
    if seconds < 60:
        return "–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ"
    elif seconds < 3600:
        mins = int(seconds // 60)
        return f"–æ–±–Ω–æ–≤–ª–µ–Ω–æ {mins} –º–∏–Ω –Ω–∞–∑–∞–¥"
    else:
        hours = int(seconds // 3600)
        return f"–æ–±–Ω–æ–≤–ª–µ–Ω–æ {hours} —á –Ω–∞–∑–∞–¥"

async def update_sessions_message():
    now_utc = datetime.now(timezone.utc)
    now_miami = now_utc.astimezone(MIAMI_TZ).replace(second=0, microsecond=0)

    markets = ["Tokyo", "London", "New York"]
    sessions_info = {}

    for market in markets:
        status, delta = get_session_status(market, now_miami)
        sessions_info[market] = {
            "status": status,
            "relative": int(delta.total_seconds()),
            "formatted_delta": format_timedelta(delta),
        }

    updated_text = format_updated_since(last_values.get("sessions_last_update"), now_utc)
    header = f"üïí Market sessions (relative times, America/New_York) ‚Äî {updated_text}\n\n"

    lines = []
    for market in markets:
        info = sessions_info[market]
        emoji = get_session_status_emoji(info["status"], info["relative"])
        status_text = "open ‚Äî closes in" if info["status"] == "open" else "closed ‚Äî opens in"
        line = f"{emoji} {market}: {status_text} {info['formatted_delta']}"
        lines.append(line)

    footer = "\n\n‚ö†Ô∏è Countdown is relative (D days Hh Mm). Gap alerts posted for session opens."
    message = header + "\n".join(lines) + footer

    channel = bot.get_channel(SESSIONS_CHANNEL_ID)
    if not channel:
        logger.warning("Sessions channel not found")
        return

    try:
        msg_id = last_values.get("sessions_msg_id")
        msg = None
        if msg_id:
            try:
                msg = await channel.fetch_message(msg_id)
            except discord.NotFound:
                msg = None
        if msg is None:
            msg = await channel.send(message)
            last_values["sessions_msg_id"] = msg.id
            last_values["sessions_msg_content"] = message
            last_values["sessions_last_update"] = now_utc
            logger.info("Sessions message sent (new)")
        else:
            if message != last_values.get("sessions_msg_content"):
                await msg.edit(content=message)
                last_values["sessions_msg_content"] = message
                last_values["sessions_last_update"] = now_utc
                logger.info("Sessions message updated")
    except Exception as e:
        logger.error(f"Failed to update sessions message: {e}")

# ===== –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç–≤–æ–π –∫–æ–¥ (fetchers, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤, —Ç–∞—Å–∫–∏, on_ready –∏ —Ç.–ø.) =====

# –ù–∞–ø—Ä–∏–º–µ—Ä:
# async def update_prices(): ...
# async def update_fng(): ...
# async def health_ping(): ...
# –∏ —Å—Ç–∞—Ä—Ç –∑–∞–¥–∞—á –≤ on_ready

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
@bot.event
async def on_ready():
    logger.info(f"‚úÖ Bot started as {bot.user}")
    # –ó–∞–ø—É—Å–∫ —Ç–≤–æ–∏—Ö —Ç–∞—Å–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–µ—Å—å
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # update_prices.start()
    # update_fng.start()
    # update_sessions.start()
    # health_ping.start()
    update_sessions.start()

if __name__ == "__main__":
    if not DISCORD_TOKEN:
        logger.error("DISCORD_TOKEN not set")
        exit(1)
    bot.run(DISCORD_TOKEN)

# ===== –¢–∞—Å–∫ update_sessions =====
from discord.ext import tasks

@tasks.loop(minutes=17)
async def update_sessions():
    try:
        await update_sessions_message()
    except Exception as e:
        logger.error(f"Error in update_sessions task: {e}")
