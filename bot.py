import os
import asyncio
import discord
import aiohttp
from aiohttp import web

TOKEN = os.getenv("DISCORD_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BTC_CHANNEL_ID = int(os.getenv("BTC_CHANNEL_ID"))  # ID –∫–∞–Ω–∞–ª–∞ BTC
ETH_CHANNEL_ID = int(os.getenv("ETH_CHANNEL_ID"))  # ID –∫–∞–Ω–∞–ª–∞ ETH
UPDATE_INTERVAL = 300  # —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç (—á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å rate-limit)

intents = discord.Intents.default()
client = discord.Client(intents=intents)

# –•—Ä–∞–Ω–∏–º –ø—Ä–æ—à–ª—ã–µ —Ü–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å Discord
last_btc_price = None
last_eth_price = None

# Health-check –¥–ª—è Koyeb
async def healthcheck(request):
    return web.Response(text="OK")

async def run_healthcheck_server():
    app = web.Application()
    app.router.add_get("/", healthcheck)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8000)
    await site.start()
    print("üåê HTTP health-check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")

async def fetch_price(session, coin_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å CoinGecko"""
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd"
    try:
        async with session.get(url, ssl=False, timeout=10) as resp:
            if resp.status != 200:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API CoinGecko: {resp.status}")
                return None
            data = await resp.json()
            return f"${data[coin_id]['usd']:,.2f}"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {coin_id.upper()}: {e}")
        return None

async def update_prices():
    global last_btc_price, last_eth_price
    await client.wait_until_ready()

    async with aiohttp.ClientSession() as session:
        while not client.is_closed():
            btc_price = await fetch_price(session, "bitcoin")
            eth_price = await fetch_price(session, "ethereum")

            if btc_price and btc_price != last_btc_price:
                try:
                    channel = client.get_channel(BTC_CHANNEL_ID)
                    if channel:
                        await channel.edit(name=f"BTC: {btc_price}")
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è BTC –∫–∞–Ω–∞–ª–∞: BTC: {btc_price}")
                        last_btc_price = btc_price
                except discord.Forbidden:
                    print("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BTC –∫–∞–Ω–∞–ª–∞")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è BTC –∫–∞–Ω–∞–ª–∞: {e}")

            if eth_price and eth_price != last_eth_price:
                try:
                    channel = client.get_channel(ETH_CHANNEL_ID)
                    if channel:
                        await channel.edit(name=f"ETH: {eth_price}")
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è ETH –∫–∞–Ω–∞–ª–∞: ETH: {eth_price}")
                        last_eth_price = eth_price
                except discord.Forbidden:
                    print("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ETH –∫–∞–Ω–∞–ª–∞")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ETH –∫–∞–Ω–∞–ª–∞: {e}")

            await asyncio.sleep(UPDATE_INTERVAL)

@client.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {client.user}")
    asyncio.create_task(update_prices())

async def main():
    await run_healthcheck_server()
    await client.start(TOKEN)

if __name__ == "__main__":
    asyncio.run(main())
