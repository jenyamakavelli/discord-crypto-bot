import os
import asyncio
import logging
import threading
from discord.ext import commands, tasks
from flask import Flask, jsonify
import requests

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

# –ö–æ–Ω—Ñ–∏–≥–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–≤–∞–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Koyeb
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
BTC_CHANNEL_ID = int(os.getenv("BTC_CHANNEL_ID"))
ETH_CHANNEL_ID = int(os.getenv("ETH_CHANNEL_ID"))
FNG_CHANNEL_ID = int(os.getenv("FNG_CHANNEL_ID"))  # –∫–∞–Ω–∞–ª –¥–ª—è Fear&Greed –∏–Ω–¥–µ–∫—Å–∞
COINGECKO_VOLUME_CHANNEL_ID = int(os.getenv("COINGECKO_VOLUME_CHANNEL_ID"))

# Flask Health-check —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route("/health")
def health():
    return jsonify({"status": "ok"})

def run_flask():
    app.run(host="0.0.0.0", port=8000)

threading.Thread(target=run_flask, daemon=True).start()

intents = commands.Intents.default()
bot = commands.Bot(command_prefix="!", intents=intents)

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
last_prices = {"btc": None, "eth": None}
last_fng = None
last_volume = None

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
UPDATE_INTERVAL_PRICES = 3
UPDATE_INTERVAL_FNG = 15
UPDATE_INTERVAL_VOLUME = 10


def get_prices():
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": "bitcoin,ethereum",
        "vs_currencies": "usd",
        "include_24hr_vol": "true"
    }
    r = requests.get(url, params=params, timeout=10)
    r.raise_for_status()
    data = r.json()
    return {
        "btc": data["bitcoin"]["usd"],
        "eth": data["ethereum"]["usd"],
        "btc_vol": data["bitcoin"].get("usd_24h_vol"),
        "eth_vol": data["ethereum"].get("usd_24h_vol"),
    }


def get_fng_index():
    url = "https://api.alternative.me/fng/"
    r = requests.get(url, timeout=10)
    r.raise_for_status()
    data = r.json()
    return int(data["data"][0]["value"])


def get_coingecko_volume():
    # –°–æ–±–∏—Ä–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π 24—á –æ–±—ä—ë–º BTC+ETH —Å CoinGecko
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": "bitcoin,ethereum",
        "vs_currencies": "usd",
        "include_24hr_vol": "true"
    }
    r = requests.get(url, params=params, timeout=10)
    r.raise_for_status()
    data = r.json()
    btc_vol = data["bitcoin"].get("usd_24h_vol", 0)
    eth_vol = data["ethereum"].get("usd_24h_vol", 0)
    total_vol = btc_vol + eth_vol
    return total_vol


async def update_prices_task():
    global last_prices
    while True:
        try:
            logger.info("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ü–µ–Ω—ã BTC –∏ ETH...")
            prices = get_prices()
            btc_price = prices["btc"]
            eth_price = prices["eth"]

            channel_btc = await bot.fetch_channel(BTC_CHANNEL_ID)
            channel_eth = await bot.fetch_channel(ETH_CHANNEL_ID)

            # –û–±–Ω–æ–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å)
            if last_prices["btc"] != btc_price:
                await channel_btc.edit(name=f"BTC: ${btc_price:,.0f}")
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∫–∞–Ω–∞–ª–∞ {BTC_CHANNEL_ID}: BTC: ${btc_price:,.0f}")
                last_prices["btc"] = btc_price
            if last_prices["eth"] != eth_price:
                await channel_eth.edit(name=f"ETH: ${eth_price:,.2f}")
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∫–∞–Ω–∞–ª–∞ {ETH_CHANNEL_ID}: ETH: ${eth_price:,.2f}")
                last_prices["eth"] = eth_price

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: {e}")
        await asyncio.sleep(UPDATE_INTERVAL_PRICES * 60)


async def update_fng_task():
    global last_fng
    while True:
        try:
            logger.info("üîÑ –û–±–Ω–æ–≤–ª—è—é –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏...")
            fng = get_fng_index()
            channel = await bot.fetch_channel(FNG_CHANNEL_ID)
            if last_fng != fng:
                await channel.edit(name=f"Fear & Greed: {fng}")
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∫–∞–Ω–∞–ª–∞ {FNG_CHANNEL_ID}: Fear & Greed: {fng}")
                last_fng = fng
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è FNG: {e}")
        await asyncio.sleep(UPDATE_INTERVAL_FNG * 60)


async def update_volume_task():
    global last_volume
    while True:
        try:
            logger.info("üîÑ –û–±–Ω–æ–≤–ª—è—é –æ–±—ä—ë–º—ã —Ç–æ—Ä–≥–æ–≤ CoinGecko...")
            volume = get_coingecko_volume()
            channel = await bot.fetch_channel(COINGECKO_VOLUME_CHANNEL_ID)
            if last_volume != volume:
                vol_str = f"{volume/1_000_000_000:.2f}B $24h vol"
                await channel.edit(name=f"Volume CG: {vol_str}")
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∫–∞–Ω–∞–ª–∞ {COINGECKO_VOLUME_CHANNEL_ID}: Volume CG: {vol_str}")
                last_volume = volume
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—ë–º–æ–≤: {e}")
        await asyncio.sleep(UPDATE_INTERVAL_VOLUME * 60)


@bot.event
async def on_ready():
    logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    bot.loop.create_task(update_prices_task())
    bot.loop.create_task(update_fng_task())
    bot.loop.create_task(update_volume_task())


if __name__ == "__main__":
    bot.run(DISCORD_TOKEN)
